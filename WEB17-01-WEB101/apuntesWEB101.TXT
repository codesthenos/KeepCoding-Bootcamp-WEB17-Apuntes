KEEPCODING 2024
BOOTCAMPT WEB17
PROFESOR: ALBERTO CASERO

ARQUITECTURA CLIENTE SERVIDOR

CLIENTE --> ENVIA PETICION
SERVIDOR --> RECIBE PETICION Y HACE COSAS

PROTOCOLOS DE COMUNICACION

HTTP --> TIPOS DE PETICIONES: (CRUD --> CREATE READ UPDATE DELETE <--> POST GET PUT DELETE)
  GET
  POST
  PUT
  DELETE

EN LA WEB:
CLIENTE --> NAVEGADOR (CHROME, BRAVE, EDGE...)
SERVIDOR --> WEB, BASE DE DATOS...

NAVEGADOR:
ES UN PROGRAMA QUE:
  INTERPRETA:
    HTML
    CSS
    JAVASCRIPT
    OTROS FORMATOS Y LENGUAJES
  RECIBE TODO ESTO POR PETICIONES USANDO UN PROTOCOLO COMO:
    HTTP/HTTPS...

HTML:
  LENGUAJE DE MARCADO --> ESTRUCTURAR SEMANTICAMENTE LA WEB

CSS:
  LENGUAJE DE DISEÃ‘O GRAFICO

JAVASCRIPT:
  LENGUAJE DE PROGRAMACION:
    INTERPRETADO (NECESITA SER INTERPRETADO, NO NECESITA SER COMPILADO A DIFERENCIA DE LOS NO INTERPRETADOS)
    EN WEB, EL INTERPRETE ES EL NAVEGADOR (NODE SALIO DE AISLAR ESTO Y SACARLO)

NODE.JS:
  EL INTERPRETE DE JAVASCRIPT

TYPESCRIPT:
  JAVASCRIPT EXTENDIDO, EL NAVEGADOR Y NODE SOLO EJECUTAN JAVASCRIPT, ES COMO UN LINTER DE TIPOS

URI -- URL -- URN

URI:
  URL SIN PROTOCOLO EJ: KEEPCODING.IO
URL:
  URI CON PROTOCOLO EJ: HTTPS://KEEPCODING.IO
URN:
  URI PARA REFERENCIAR RECURSOS CON UN ESQUEMA ESPECIFICO (POCO USO)

APP MOVIL

CLIENTE --> APP MOVIL --> PETICION (TAMBIEN PUEDE SER .JSON) --> SERVIDOR
SERVIDOR --> RECIBE E INTERPRETA PETICION --> DEVUELVE .JSON (CASI SIEMPRE)

JSON: <--FORMATO DE INTERCAMBIO DE DATOS (SOPORTADO POR PRACTICAMENTE TODO)
  EJEMPLO.JSON:
  {
    PROPIEDAD: 'VALOR',
    PROPIEDAD:
      PROPIEDAD: 'VALOR'
    PROPIEDAD: 'VALOR'
  }

EN LA ARQUITECTURA CLIENTE SERVIDOR PUEDE PASAR Y PASA:

CLIENTE --> PETICION --> SERVIDOR RECIBE --> SERVIDOR ENVIA A OTRO SERVIDOR --> ... --> DEVULEVE A CLIENTE

API:
  APPLICATION PROGRAMMING INTERFACE (LOS BOTONES DEL ASCENSOR)

API REST:
  VIA DE COMUNICACION QUE ME PERMITE COMUNICAR CON UN PROGRAMA QUE ESTA EN UN SERVIDOR USANDO HTTP

FRONTEND:
  EL CLIENTE, ES DECIR LA PARTE CON LA QUE EL USUARIO INTERACTUA
  HTML --- CSS --- JAVASCRIPT
BACKEND:
  EL SERVIDOR, ES DECIR LA APLICACION QUE RECIBE LA PETICION DEL CLIENTE Y HACE COSAS
  MUCHOS LENGUAJES JAVASCRIP -- PYTHON -- JAVA -- BLA BLA BLA
FULL-STACK:
  FRONTEND & BACKEND

LIBRERIA:
  HERRAMIENTA QUE FUNCINA SIN NORMAS ESPECIFICAS
FRAMEWORK:
  HERRAMIENTA QUE FUNCIONA BAJO UNAS NORMAS ESPECIFICAS

REACT --> LIBRERIA
ANGULAR --> FRAMEWORK
VUE --> LIBRERIA

WEBAPP:
  WEB QUE SE PIDE UNA SOLA VEZ Y LA INTERACTIVIDAD NO VIENE DE HACER PETICIONES
  UNA SPA (SINGLE PAGE APPLICATION):
    ES UN TIPO DE WEBAPP QUE SIN HACER PETICIONES ME GENERA URLS ACCESIBLES

PWA (PROGRESSIVE WEBAPP):
  WEBAPP QUE PERMITE SER INSTALADA COMO UNA APP NORMAL EN EL SISTEMA OPERATIVO
  PERMITE QUE FUNCIONE SIN CONEXION A INTERNET (LEGACY MODE DE HACER APLICACIONES WEB PARA EL MOVIL/TABLET)

TECNOLOGIAS BACKEND:
  JAVASCRIPT --> NODEJS --> EXPRESS
  PYTHON --> ENTORNO --> DJANGO
  PHP --> ENTORNO --> LARAVEL
  JAVA ...
  RUBY ...
  ...

BACKEND:
  SERVIDOR:
    ORDENADOR QUE ESTA FUNCIONANDO SIEMPRE
    ALMACENAN FICHEROS
    EJECUTAN PROGRAMAS:
      GESTIONAN DATOS Y RECURSOS

WEB:
  STATIC WEBSITE:
    DEVUELVE UN RECURSO ESTATICO:
      SIEMPRE QUE ENTRO VEO LO MISMO
      HTML -- CSS -- JPG ...

    SERVER SIDE RENDERING:
      DEVUELVE ALGO DE MANERA DINAMICA:
        EL CONTENIDO CAMBIA DEPENDIENDO DE CUANDO ENTRO:
          EJEMPLO, NOTICIAS, PAGINA QUE CAMBIE CADA DIA...
      SE COMUNICA CON OTRO SERVIDOR PARA DEVOLVER LA STATIC WEB QUE TECNOLOGIAS
      EL QUE COMPONE EL HTML ES EL SERVIDOR

    LEGACY
  
  WEB APP (CLIENT SIDE RENDERING):
    EL RECURSO MOSTRADO ES INTERACTIVO SIN USAR BACKEND (REACT, POR EJEMPLO)
  
    HOY EN DIA EN CASI TODAS LAS WEB APPS
  
  HIBRIDOS:
    ALGUNAS WEBS DE NOTICIAS, MARCA.COM:
      EL SCROLL INFINITO ES CLIENT SIDE RENDERING
      Y CUANDO HAGO CLICK EN LOS ENLACES FORMATO STATIC
    
CLOUD COMPUTING:
  DISPONIBILIDAD BAJO DEMANDA DE RECURSOS DE COMPUTACION

  EVITA LA LOGISITICA DE LOS SERVIDORES FISICOS

  FLEXIBILIDAD A LA HORA DE CONTRATAR POR NECESIDAD

  SERVIDORES EN LA NUBE

COOKIES:
  ARCHIVOS QUE LAS WEBS DEJAN EN EL NAVEGADOR

  HACEN QUE NO TENGA QUE VOLVER A PEDIR EL RECURSO

  GUARDAN TUS CREDENCIALES

  (MALICIOSAS--> PUEDEN TRACKEAR A UN USUARIO A TRAVES DE WEBS)

PUESTOS DE TRABAJO:
  MAQUETADOR:
    HTML --- CSS --- NO JAVASCRIPT
  DESARROLLADOR FRONTEND:
    JAVASCRIPT --- REACT --- ANGULAR --- VUE --- HTML --- CSS
  DESARROLLADOR BACKEND:
    JAVASCRIPT --- NODE --- EXPRESS --- HTML --- CSS
  DESARROLLADOR FULLSTACK:
    FRONTEND & BACKEND
  TEAM LEAD:
    LIDER DE EQUIPO
  ENGINEERING MANAGER:
    GESTIONAN VARIOS PROYECTOS A LA VEZ
  CTO:
    DIRECTOR DE TECNOLOGIAS

GUILLERMO RUIZ ARRANZ -- CODESTHENOS